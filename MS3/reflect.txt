*****************************************************************************
                               Reflection
                           Assignment-1 Milestone-3
Full Name  : Aayushee Singh
Student ID#: 173927211
Email      :asingh1221@myseneca.ca
Section    :NHH

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
*****************************************************************************
Answer1: The other important functions I used in my code are:
	int lowestAppointment(struct Appointment appoints[], int number);
	void sortAppointment(struct Appointment appoints[], int number);
The purpose of function:int lowestAppointment(struct Appointment appoints[], int number);

This function was called in the sortAppointment function to find the earliest or lowest appointment which will be required to sort the given appointments in the asceding order. This function will basically work as, initially it will find the minimum year from the list of given appointments to us and i did this, by adding it in a for loop till the maximum number. Further exiting the loop, I again used a loop to find the lowest month keeping in mind the lowest year calculated year from above loop. This will continue untill we find the minimum minute at minumum hour at the lowest day of lowest month and lowest year, also keeping in mind that the patient number of the particular patient should not be equal to 0 (the logic of this is explained in sortAppointment function). When all the condition will get true, I stored the particular index from the appointment list in variable index. As we can see from the  prototype that it is returning an integer value to the function , therefore at the end index is returned to the called function.


The purpose of function:void sortAppointment(struct Appointment appoints[], int number);

This function is performimg the main sorting which first initialised and declared declared a new array(of size maximum appointments)Appointment structure named temp to zero. A loop is applied till the maximum appointments read from importAppointments and passed to this function as argument in number, as defined in the function prototype. In the begiining of the loop the above explained function lowestAppointment is called to get the index of lowest appointment on the basis of year,month,day,hour and minute. After that we will adhere to store each value of year, month ,day hour, minute at the calculated index  of appointment structure in the array of the temp structure. When each value is stored, this is  the necessity to empty the appointment array at the lowest calculated index so that we can find the second then third then fourth lowest appointments and so on.
Once the array is sorted in the temp array , I started the loop from 0  to max to assign the values to the actual array of appointment in a sorted format.




Answer2: The prototype of the addAppointment function is: void addAppointment(struct Appointment* appointments, int maxAppointments, struct Patient* patients, int maxPatient)
I coded near about 130 to 150 lines of code to complete this particular function using the computational thinking of decomposition and pattern recognition.

I decomposed my code in the following parts:
a)First inserted a loop to check whether there is any place free to add the appointment and if any empty space is found(the condition used is if patient number < 1),then store its index in the variable index.
b)Further step included to check if the calculated index from above part a is valid or not , if its valid continue the further decomposed steps.
	
Prompt the patient number to add.
# Now the loop will begin to prompt the year,month,day,hour,minute to check from the appointment array , If that matches the pattern a flag number is set to 1. In this part also pattern recognition is used for printing the end days of month  to calculate the number of days keeping in mind the number of days in the case of leap years also.
I solved this scenerio by first prompting the year then the month, then checking if it is equal to 2 or not , when its equal to 2 ,then again checked the condition whether the year is leap year or not and assigned the days according to the days in the month
	if number becomes 1, it means the available sort is full and continue prompting of year and other stuff.
	if number not equal to 1, then check the other decomposed part that is to check the validations of hour and minute.

# In validations of hours and minutes,the particular start,end and gap intervals are provided to us and we need to configure that the entered hour and time is in the given time or not. Therefore, it was done by inserting again the do while loop in the existing loop and ended the loop with flag condition. Inside the loop I used the all the scenerios that we want for the appointment and coded each part according to it .
 This is how I combined subparts which I decomposed earlier to make this whole one function work.
After this at the end I inserted this new appointment in the actual array of appointments in the sorted form.



Answer3: Basically I started my work on milestone 3 from last Friday. Before starting the actual work, first I decided to go through all the lecture notes on text files beacuse this was the new topic introduced to us that week and it was the part of the milestone to accomplish. Initially, I faced some problem to import the patients and appointments in the function 
int importPatients(const char* datafile, struct Patient patients[], int max) and int importAppointments(const char* datafile, struct Appointment appoints[], int max), however I managed to do so till Saturday. 
The next step was to view all the appointments in the given function. At first instance I thought, it is quite easy but later on I realised that the appointments are sorted in ascending order and we have to use the logic to sort it and then view it on the screen. I struggled a lot in doing, tried to understand the selection sort method and even understood also but then again I relaised that it is not that simple because we needed to find the lowest minute of lowest hour of lowest day in lowest month and year. Then i took the help  of my professor in accomplishing this task successfully and got an excellent guidance. While performing this I was prompted to introduce two extra function as explained in part 1 int lowestAppointment
(struct Appointment appoints[], int number); and void sortAppointment(struct Appointment appoints[], int number); and also came across many errors, took very much time. So, i decided to take a break from coding as i was continuously working since friday and was frustated. I decided to take a good and sound sleep and resume working with the fresh mind. On Tuesday I again started working with the add appointment and remove appointment functions.
The addAppointment function was the most time consuming function for me as there I used my 100 percent brain in  developing its logic and the understanding required fot it was also very deep.I used every possible compuatational thinking to breakdown the problems and then solved it. After so much efforts I was able to fulfill the cause. Step by step explanation of this function is explained in answer 2. 
At last in the removeAppointment function, first I prompted for the patient number, year , month, day and checked whetehr it exists in the patient record or not.Finally serached for the whole record with the help of appointment data array to print its whole data and then at last confirming the user to finally remove it or not. If confirmed, patient number and other   data is set to zero and make it empty.
After that the code ran but still got multiple compilation errors on the matrix server, the whole project became very hectic to handle at certain point , however satisfied with its successful completion with proper understanding.














